#ifndef RELAY8_H_
#define RELAY8_H_

#include <stdint.h>

#define ADC_CH_NO	8
#define DAC_CH_NO	4
#define ADC_RAW_VAL_SIZE	2
#define DAC_MV_VAL_SIZE		2

#define RETRY_TIMES	10
#define CALIBRATION_KEY 0xaa
enum
{
	I2C_MEM_RELAY_VAL_ADD = 0,
	I2C_MEM_RELAY_SET_ADD,
	I2C_MEM_RELAY_CLR_ADD,
	I2C_MEM_OPTO_IN_ADD,
	I2C_MEM_GPIO_VAL_ADD,
	I2C_MEM_GPIO_SET_ADD,
	I2C_MEM_GPIO_CLR_ADD,
	I2C_MEM_GPIO_DIR_ADD,

	I2C_MEM_ADC_VAL_RAW_ADD,
	I2C_MEM_ADC_VAL_MV_ADD = I2C_MEM_ADC_VAL_RAW_ADD + ADC_CH_NO * ADC_RAW_VAL_SIZE,
	I2C_MEM_DAC_VAL_MV_ADD = I2C_MEM_ADC_VAL_MV_ADD + ADC_CH_NO * ADC_RAW_VAL_SIZE,
	I2C_MEM_OD_PWM_VAL_RAW_ADD = I2C_MEM_DAC_VAL_MV_ADD + DAC_CH_NO * DAC_MV_VAL_SIZE,
	I2C_MEM_OPTO_IT_RISING_ADD = I2C_MEM_OD_PWM_VAL_RAW_ADD + DAC_CH_NO * DAC_MV_VAL_SIZE,
	I2C_MEM_OPTO_IT_FALLING_ADD,
	I2C_MEM_GPIO_EXT_IT_RISING_ADD,
	I2C_MEM_GPIO_EXT_IT_FALLING_ADD,
	I2C_MEM_OPTO_IT_FLAGS_ADD,
	I2C_MEM_GPIO_IT_FLAGS_ADD,

	I2C_MEM_DIAG_TEMPERATURE_ADD,

	I2C_MEM_DIAG_3V3_MV_ADD,
	I2C_MEM_DIAG_3V3_MV_ADD1,

	I2C_MEM_CALIB_VALUE,
	I2C_MEM_CALIB_CHANNEL = I2C_MEM_CALIB_VALUE + 2,
	I2C_MEM_CALIB_KEY,

	I2C_MEM_WDT_RESET_ADD = 100,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,

	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD + 4,

	I2C_MEM_REVISION_HW_MAJOR_ADD = 0x78,
	I2C_MEM_REVISION_HW_MINOR_ADD,
	I2C_MEM_REVISION_MAJOR_ADD,
	I2C_MEM_REVISION_MINOR_ADD,
	SLAVE_BUFF_SIZE
}I2C_MEM_ADD;


#define CHANNEL_NR_MIN		1
#define RELAY_CH_NR_MAX		8
#define OPTO_IN_CH_NR_MAX	8
#define GPIO_CH_NR_MAX		4
#define OD_CH_NR_MAX			4
#define DAC_CH_NR_MAX		4
#define ADC_CH_NR_MAX		8

#define OD_PWM_VAL_MAX	10000

#define ERROR	-1
#define OK		0
#define FAIL	-1

#define SLAVE_OWN_ADDRESS_BASE 0x28

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;

typedef enum
{
	OFF = 0,
	ON,
	STATE_COUNT
} OutStateEnumType;

typedef struct
{
 const char* name;
 const int namePos;
 void(*pFunc)(int, char**);
 const char* help;
 const char* usage1;
 const char* usage2;
 const char* example;
}CliCmdType;

#endif //RELAY8_H_
